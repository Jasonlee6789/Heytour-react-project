[{"D:\\CodeProject\\JOB\\heytour\\src\\index.js":"1","D:\\CodeProject\\JOB\\heytour\\src\\App.js":"2","D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenu.js":"3","D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenuReducer.js":"4","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobList.js":"5","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\Login.js":"6","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListAPI.js":"7","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListContent.js":"8","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginReducer.js":"9","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginAPI.js":"10","D:\\CodeProject\\JOB\\heytour\\src\\common\\SelectForm.js":"11","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\AddJob.js":"12","D:\\CodeProject\\JOB\\heytour\\src\\common\\NavAdmin.js":"13","D:\\CodeProject\\JOB\\heytour\\src\\config\\apiUrl.js":"14","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobAdmin.js":"15","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetail.js":"16","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetailReducer.js":"17"},{"size":187,"mtime":1609146393916,"results":"18","hashOfConfig":"19"},{"size":728,"mtime":1610707330318,"results":"20","hashOfConfig":"19"},{"size":3004,"mtime":1611131696114,"results":"21","hashOfConfig":"19"},{"size":540,"mtime":1607128033171,"results":"22","hashOfConfig":"19"},{"size":1996,"mtime":1611149606013,"results":"23","hashOfConfig":"19"},{"size":3558,"mtime":1611189416383,"results":"24","hashOfConfig":"19"},{"size":4661,"mtime":1611149545051,"results":"25","hashOfConfig":"19"},{"size":2939,"mtime":1610613748366,"results":"26","hashOfConfig":"19"},{"size":894,"mtime":1607085531654,"results":"27","hashOfConfig":"19"},{"size":1830,"mtime":1610273495683,"results":"28","hashOfConfig":"19"},{"size":1042,"mtime":1610584146093,"results":"29","hashOfConfig":"19"},{"size":6974,"mtime":1611191629026,"results":"30","hashOfConfig":"19"},{"size":963,"mtime":1610677052588,"results":"31","hashOfConfig":"19"},{"size":244,"mtime":1611133154906,"results":"32","hashOfConfig":"19"},{"size":1757,"mtime":1610618890290,"results":"33","hashOfConfig":"19"},{"size":4321,"mtime":1611149672026,"results":"34","hashOfConfig":"19"},{"size":982,"mtime":1611149417094,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1inprzj",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\CodeProject\\JOB\\heytour\\src\\index.js",[],["78","79"],"D:\\CodeProject\\JOB\\heytour\\src\\App.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenu.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenuReducer.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobList.js",["80","81","82","83","84"],"import React, { useEffect, useState, useReducer } from \"react\";\r\nimport { Grid, Breadcrumb, Pagination } from \"semantic-ui-react\";\r\nimport { useJobDelete, useJobList } from \"./JobListAPI\";\r\nimport JobListContent from \"./JobListContent\";\r\nimport SelectForm from \"../common/SelectForm\";\r\nimport JobDetail from \"./JobDetail\";\r\nimport jobListReducer from \"./JobDetailReducer\";\r\n\r\nexport default function JobList() {\r\n  const [jobListResponse, setJobListFilter] = useJobList(null);\r\n  const [jobDeleteResponse, setJobId] = useJobDelete();\r\n\r\n  const [jobs, setJobs] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(jobListResponse);\r\n\r\n    if (jobListResponse.data && !jobListResponse.isError) {\r\n      setJobs(jobListResponse.data);\r\n    }\r\n\r\n    if (jobDeleteResponse.data && !jobDeleteResponse.isError) {\r\n      setJobs(jobs.filter((job) => job.id !== jobDeleteResponse.data));\r\n    }\r\n  }, [jobListResponse, jobDeleteResponse]);\r\n  //const pages = 3;\r\n  // let pageLen = Math.ceil(jobs.length / pages);\r\n\r\n  function handleDelete(id) {\r\n    setJobId(id);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Section link>Home</Breadcrumb.Section>\r\n        <Breadcrumb.Divider />\r\n        <Breadcrumb.Section active>Jobs</Breadcrumb.Section>\r\n      </Breadcrumb>\r\n      <SelectForm />\r\n      <Grid>\r\n        {/* {jobListResponse.data &&\r\n          jobListResponse.data.map((job, index) => { */}\r\n        {jobs &&\r\n          jobs.map((job, index) => {\r\n            return (\r\n              <JobListContent\r\n                key={job.id}\r\n                //isLoading={jobListResponse.isLoading}\r\n                job={job}\r\n                deleteJob={handleDelete}\r\n                // putJob={onPutjob}\r\n              />\r\n            );\r\n          })}\r\n      </Grid>\r\n      <Pagination\r\n        defaultActivePage={5}\r\n        totalPages={10}\r\n        floated=\"right\"\r\n        onPageChange={(data) => {\r\n          console.log(data);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\Login.js",["85"],"import React, { useEffect, useRef, useReducer } from \"react\";\r\nimport { Button, Form, Modal, Message } from \"semantic-ui-react\";\r\nimport { useLogin } from \"./LoginAPI\";\r\nimport authReducer from \"./LoginReducer\";\r\n\r\nexport default function Login(props) {\r\n  const didMountRef = useRef(false);\r\n  //利用ref.current保存组件更新前的值，false表示更新完之后\r\n  const [login, setLogin] = useLogin(null);\r\n\r\n  const [state, dispatch] = useReducer(authReducer, {\r\n    username: \"\",\r\n    password: \"\",\r\n    isError: false,\r\n    isLoading: false,\r\n    validation: {},\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      if (login.isError) {\r\n        dispatch({ type: \"AUTH_ERROR\" });\r\n      } else if (login.isLoading) {\r\n        dispatch({ type: \"AUTH_LOADING\" });\r\n      } else {\r\n        props.onLogin(login.data);\r\n      }\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [login]);\r\n\r\n  function handleLogin() {\r\n    //dispatch({ type: \"AUTH_LOADING\" });\r\n    const user = {\r\n      username: state.username,\r\n      password: state.password,\r\n    };\r\n    setLogin(user);\r\n  }\r\n  /*const [user, setUser] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");*/\r\n\r\n  //   const [isLoading, setIsLoading] = useState(false);\r\n\r\n  //   const checkLogin = () => {\r\n  //     setIsLoading(true);\r\n  //     setTimeout(() => {\r\n  //       setIsLoading(false);\r\n  //     }, 2000);\r\n  //   };\r\n  function handleChange(e, { name, value }) {\r\n    dispatch({\r\n      type: \"AUTH_TYPING\",\r\n      payload: { name: name, value: value },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      closeIcon\r\n      onClose={props.onClose}\r\n      // onOpen={() => props.onOpen}\r\n      open={props.open}\r\n    >\r\n      <Modal.Header>登录框</Modal.Header>\r\n      <Modal.Content>\r\n        <Form\r\n          onSubmit={handleLogin}\r\n          loading={state.isLoading}\r\n          error={state.isError}\r\n        >\r\n          <Form.Field>\r\n            <Form.Input\r\n              label=\"输入用户名\"\r\n              type=\"text\"\r\n              placeholder=\"User Name\"\r\n              required\r\n              name=\"username\"\r\n              value={state.username}\r\n              //onChange 属性，当Input框的内容被改变的时候，\r\n              //就自动调用onChange中的函数，然后在函数中使用set方法将用户名和密码储存到state中\r\n              // onChange={(e) => {\r\n              //   setUser(e.target.value);\r\n              // }}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <Form.Input\r\n              label=\"输入密码\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              required\r\n              name=\"password\"\r\n              value={state.password}\r\n              // onChange={(e) => {\r\n              //   setPassword(e.target.value);\r\n              // }}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Button type=\"button\" onClick={props.onClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            // onClick={() => {\r\n            //   props.onLogin(user);\r\n            // }}\r\n          >\r\n            Login\r\n          </Button>\r\n          {state.isError && (\r\n            <Message\r\n              error\r\n              header=\"Login Failed\"\r\n              content=\"Please check your username and password.\"\r\n            />\r\n          )}\r\n        </Form>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListAPI.js",["86","87","88"],"import { useState, useEffect, useReducer, useRef } from \"react\";\r\n// import JobData from \"./data.json\";\r\nimport axios from \"axios\";\r\nimport servicePath from \"../config/apiUrl\";\r\n\r\nfunction jobAPIReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"FETCH_INIT\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case \"FETCH_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: action.payload,\r\n      };\r\n    case \"FETCH_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        ieError: true,\r\n      };\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport function useJobList(initialFilter) {\r\n  const [state, dispatch] = useReducer(jobAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n  //const url = \"https://localhost:44351/api/jobs\";\r\n  const url = servicePath.getJobs;\r\n  const didMountRef = useRef(true);\r\n  //useRef修改ref的值不会重新render,在组件更新时触发设置成true\r\n  //达成在第一次渲染时，会不会render这个地方\r\n  // const data = JobData;\r\n  const [filter, setFilter] = useState(null);\r\n  //时间排序 比如找出最近一周的工作。\r\n  useEffect(() => {\r\n    // function sleep(ms) {\r\n    //   return new Promise((resolve) => setTimeout(resolve, ms));\r\n    // }\r\n    async function getJobs() {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n      // const headers = {\r\n      //   \"Content-Type\": \"application/json\",\r\n      // };\r\n\r\n      //await sleep(600);\r\n      // dispatch({ type: \"FETCH_SUCCESS\", payload: data });\r\n      try {\r\n        const response = await axios.get(url);\r\n        console.log(response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: response.data });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    }\r\n\r\n    if (didMountRef.current) {\r\n      getJobs();\r\n    }\r\n  }, [filter]);\r\n  return [state, setFilter];\r\n}\r\n\r\nexport function useJobDelete() {\r\n  const didMountRef = useRef(false);\r\n  //useRef可以保存组件更新前的一些状态\r\n  //组件更新时，ref.current中保存的值不会自动更新，需要我们手动更新\r\n  //const url = \"https://localhost:44351/api/jobs/\";\r\n  const url = servicePath.getJobs;\r\n  const [id, setId] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(jobAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const deleteJob = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n\r\n      try {\r\n        const response = await axios.delete(url + id);\r\n        console.log(\"call了删除后的：\" + response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: id });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    };\r\n\r\n    if (didMountRef.current && id) {\r\n      deleteJob();\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [id]);\r\n\r\n  return [state, setId];\r\n}\r\n\r\nexport function useJobSave() {\r\n  const didMountRef = useRef(false);\r\n  //useRef修改ref的值不会重新render,在组件更新时触发设置成false\r\n  //useRef可以保存组件更新前的一些状态\r\n  //组件更新时，ref.current中保存的值不会自动更新，需要我们手动更新\r\n  const url = servicePath.getJobs;\r\n  const [job, setJob] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(jobAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const putJob = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n\r\n      try {\r\n        const response = await axios.put(url + job.id, job);\r\n        console.log(response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: response.data });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    };\r\n\r\n    const postJob = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n\r\n      try {\r\n        const response = await axios.post(url, job);\r\n        console.log(response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: response.data });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    };\r\n\r\n    if (didMountRef.current && job && job.id) {\r\n      putJob();\r\n    } else if (didMountRef.current && job) {\r\n      postJob();\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [job]);\r\n  //一个是给出去的state 另一个是用来给consumer更新state的\r\n  return [state, setJob];\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListContent.js",["89","90"],"import React, { useState } from \"react\";\r\nimport { Button, Image, Card, Grid, Icon } from \"semantic-ui-react\";\r\n// import data from \"./data.json\";\r\nimport moment from \"moment\";\r\n\r\nexport default function JobListContent(props) {\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // const data = data.map((props.job) => {\r\n  return (\r\n    <Grid.Row>\r\n      <Grid.Column width={16}>\r\n        <Card fluid>\r\n          <Card.Content textAlign=\"left\">\r\n            <Image\r\n              src={props.job.picture}\r\n              size=\"small\"\r\n              wrapped\r\n              floated=\"right\"\r\n            />\r\n            <Card.Header>\r\n              {props.job.title} <br />\r\n              <br />\r\n              Company Name: {props.job.company}\r\n            </Card.Header>\r\n            <Card.Description>\r\n              {\"Listed On: \" + moment(props.job.postedOn).format(\"YYYY-MM-DD\")}\r\n            </Card.Description>\r\n          </Card.Content>\r\n\r\n          <Card.Content textAlign=\"left\">\r\n            <Card.Meta>\r\n              Status:{\" \"}\r\n              {props.job.isActive ? (\r\n                <Icon name=\"circle check\" color=\"green\" content=\"Active\">\r\n                  Active\r\n                </Icon>\r\n              ) : (\r\n                <Icon name=\"times circle\" color=\"red\" content=\"Expired\">\r\n                  Expired\r\n                </Icon>\r\n              )}\r\n            </Card.Meta>\r\n            <Card.Meta>\r\n              Location: {props.job.location} - Industry: {props.job.industry}\r\n            </Card.Meta>\r\n            {/* <Card.Meta>Industry: {props.job.industry}</Card.Meta> */}\r\n            <Card.Meta>Email: {props.job.email}</Card.Meta>\r\n            <Card.Meta>Post Date: {props.job.postedOn}</Card.Meta>\r\n            <Card.Description>{props.job.jobDesc}</Card.Description>\r\n          </Card.Content>\r\n\r\n          <Card.Content>\r\n            <Button\r\n              onClick={(e) => {\r\n                props.deleteJob(props.job.id);\r\n                console.log(\"点击了删除\");\r\n                // const url =\r\n                //   \"https://localhost:44351/api/jobs/\" + props.job.id;\r\n                // axios.delete(url);\r\n              }}\r\n              icon=\"minus\"\r\n              floated=\"right\"\r\n              content=\"Delete\"\r\n              color=\"teal\"\r\n            />\r\n            <Button\r\n              icon=\"edit\"\r\n              floated=\"right\"\r\n              content=\"Edit\"\r\n              primary\r\n              onClick={() => {\r\n                console.log(\"点击了编辑\");\r\n                // <Route path=\"/job/:${props.job.id} \" component={JobDetail} />;\r\n              }}\r\n            />\r\n\r\n            <Button icon=\"plus\" floated=\"right\" content=\"Apply\" primary />\r\n            <Button icon=\"star\" floated=\"right\" content=\"Save\" primary />\r\n          </Card.Content>\r\n        </Card>\r\n      </Grid.Column>\r\n    </Grid.Row>\r\n  );\r\n  // });\r\n  // return <Grid padded>{data.job}</Grid>;\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginReducer.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginAPI.js",["91"],"import { useState, useEffect, useReducer, useRef } from \"react\";\r\n\r\nfunction authAPIReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"AUTH_INIT\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case \"AUTH_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: action.payload,\r\n      };\r\n    case \"AUTH_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport function useLogin(initialUser) {\r\n  const didMountRef = useRef(false);\r\n  //修改ref的值不会重新render,在组件更新时触发\r\n  const mockData = {\r\n    userName: \"JL\",\r\n    password: \"123456\",\r\n  };\r\n\r\n  const mockJsonRes =\r\n    '{\"firstName\": \"Admin\", \"lastName\": \"Lee\", \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"}';\r\n\r\n  const data = JSON.parse(mockJsonRes);\r\n\r\n  const [user, setUser] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(authAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function sleep(ms) {\r\n      return new Promise((resolve) => setTimeout(resolve, ms));\r\n    }\r\n\r\n    async function authenticate() {\r\n      dispatch({ type: \"AUTH_INIT\" });\r\n      await sleep(600);\r\n\r\n      if (user.password === mockData.password) {\r\n        dispatch({ type: \"AUTH_SUCCESS\", payload: data });\r\n      } else {\r\n        dispatch({ type: \"AUTH_FAILURE\" });\r\n      }\r\n    }\r\n\r\n    if (didMountRef.current) {\r\n      authenticate();\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [user]);\r\n\r\n  return [state, setUser];\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\common\\SelectForm.js",["92","93"],"import React, { useEffect } from \"react\";\r\nimport { Input, Segment } from \"semantic-ui-react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport JobList from \"../job-list/JobList\";\r\n\r\nconst SelectForm = () => {\r\n  // useEffect(() => {\r\n  //Todo:怎么定义一个方法，输入内容 摁回车 会去搜索 并显示在列表页上？\r\n  //   let tempId = this.props.match.params.id;\r\n  // });\r\n\r\n  return (\r\n    <div>\r\n      <Segment basic textAlign=\"right\">\r\n        <Input\r\n          action={{ color: \"blue\", content: \"Search\" }}\r\n          icon=\"search\"\r\n          iconPosition=\"left\"\r\n          placeholder=\"Enter ID to search \"\r\n          // onChange={(e)=>{e.target.value}}\r\n          onKeyDown={(e) => {\r\n            if (e.keyCode === 13) {\r\n              console.log(\"执行搜索工作的方法\");\r\n            }\r\n          }}\r\n        />\r\n      </Segment>\r\n      <Router>\r\n        <Route path=\"/jobs/:id\" component={JobList} />\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectForm;\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\AddJob.js",["94","95","96","97","98","99"],"D:\\CodeProject\\JOB\\heytour\\src\\common\\NavAdmin.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\config\\apiUrl.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobAdmin.js",["100","101"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Breadcrumb } from \"semantic-ui-react\";\r\nimport { useJobDelete, useJobList } from \"./JobListAPI\";\r\nimport JobListContent from \"./JobListContent\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction JobAdmin() {\r\n  const [jobListResponse, setJobListFilter] = useJobList(null);\r\n  const [jobDeleteResponse, setJobId] = useJobDelete();\r\n\r\n  const [jobs, setJobs] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(jobListResponse);\r\n\r\n    if (jobListResponse.data && !jobListResponse.isError) {\r\n      setJobs(jobListResponse.data);\r\n    }\r\n\r\n    if (jobDeleteResponse.data && !jobDeleteResponse.isError) {\r\n      setJobs(jobs.filter((job) => job.id !== jobDeleteResponse.data));\r\n    }\r\n  }, [jobListResponse, jobDeleteResponse]);\r\n\r\n  function handleDelete(id) {\r\n    setJobId(id);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Link to={\"/home\"}>\r\n          {\" \"}\r\n          <Breadcrumb.Section link>Home</Breadcrumb.Section>\r\n        </Link>\r\n        <Breadcrumb.Divider />\r\n        <Breadcrumb.Section active>Admin</Breadcrumb.Section>\r\n      </Breadcrumb>\r\n      <Grid>\r\n        {/* {jobListResponse.data &&\r\n          jobListResponse.data.map((job, index) => { */}\r\n        {jobs &&\r\n          jobs.map((job, index) => {\r\n            return (\r\n              <Link to={\"/jobs/\" + job.id}>\r\n                <JobListContent\r\n                  key={job.id}\r\n                  //isLoading={jobListResponse.isLoading}\r\n                  job={job}\r\n                  deleteJob={handleDelete}\r\n                  // putJob={onPutjob}\r\n                />\r\n              </Link>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobAdmin;\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetail.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetailReducer.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":38,"nodeType":"108","messageId":"109","endLine":1,"endColumn":48},{"ruleId":"106","severity":1,"message":"110","line":6,"column":8,"nodeType":"108","messageId":"109","endLine":6,"endColumn":17},{"ruleId":"106","severity":1,"message":"111","line":7,"column":8,"nodeType":"108","messageId":"109","endLine":7,"endColumn":22},{"ruleId":"106","severity":1,"message":"112","line":10,"column":27,"nodeType":"108","messageId":"109","endLine":10,"endColumn":43},{"ruleId":"113","severity":1,"message":"114","line":25,"column":6,"nodeType":"115","endLine":25,"endColumn":42,"suggestions":"116"},{"ruleId":"113","severity":1,"message":"117","line":31,"column":6,"nodeType":"115","endLine":31,"endColumn":13,"suggestions":"118"},{"ruleId":"113","severity":1,"message":"119","line":72,"column":6,"nodeType":"115","endLine":72,"endColumn":14,"suggestions":"120"},{"ruleId":"113","severity":1,"message":"119","line":109,"column":6,"nodeType":"115","endLine":109,"endColumn":10,"suggestions":"121"},{"ruleId":"113","severity":1,"message":"119","line":162,"column":6,"nodeType":"115","endLine":162,"endColumn":11,"suggestions":"122"},{"ruleId":"106","severity":1,"message":"123","line":7,"column":10,"nodeType":"108","messageId":"109","endLine":7,"endColumn":17},{"ruleId":"106","severity":1,"message":"124","line":7,"column":19,"nodeType":"108","messageId":"109","endLine":7,"endColumn":29},{"ruleId":"113","severity":1,"message":"125","line":71,"column":6,"nodeType":"115","endLine":71,"endColumn":12,"suggestions":"126"},{"ruleId":"106","severity":1,"message":"127","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"106","severity":1,"message":"128","line":3,"column":42,"nodeType":"108","messageId":"109","endLine":3,"endColumn":46},{"ruleId":"106","severity":1,"message":"129","line":13,"column":8,"nodeType":"108","messageId":"109","endLine":13,"endColumn":19},{"ruleId":"106","severity":1,"message":"130","line":24,"column":10,"nodeType":"108","messageId":"109","endLine":24,"endColumn":18},{"ruleId":"106","severity":1,"message":"131","line":28,"column":10,"nodeType":"108","messageId":"109","endLine":28,"endColumn":17},{"ruleId":"106","severity":1,"message":"132","line":32,"column":10,"nodeType":"108","messageId":"109","endLine":32,"endColumn":18},{"ruleId":"106","severity":1,"message":"133","line":32,"column":20,"nodeType":"108","messageId":"109","endLine":32,"endColumn":31},{"ruleId":"134","severity":1,"message":"135","line":125,"column":22,"nodeType":"136","messageId":"137","endLine":125,"endColumn":24},{"ruleId":"106","severity":1,"message":"112","line":8,"column":27,"nodeType":"108","messageId":"109","endLine":8,"endColumn":43},{"ruleId":"113","severity":1,"message":"114","line":23,"column":6,"nodeType":"115","endLine":23,"endColumn":42,"suggestions":"138"},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'JobDetail' is defined but never used.","'jobListReducer' is defined but never used.","'setJobListFilter' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'jobs'. Either include it or remove the dependency array. You can also do a functional update 'setJobs(j => ...)' if you only need 'jobs' in the 'setJobs' call.","ArrayExpression",["141"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["142"],"React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["143"],["144"],["145"],"'isAdmin' is assigned a value but never used.","'setIsAdmin' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data' and 'mockData.password'. Either include them or remove the dependency array.",["146"],"'useEffect' is defined but never used.","'Link' is defined but never used.","'servicePath' is defined but never used.","'isActive' is assigned a value but never used.","'picture' is assigned a value but never used.","'postedOn' is assigned a value but never used.","'setPostedOn' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["147"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"148","fix":"160"},"Update the dependencies array to be: [jobListResponse, jobDeleteResponse, jobs]",{"range":"161","text":"162"},"Update the dependencies array to be: [login, props]",{"range":"163","text":"164"},"Update the dependencies array to be: [filter, url]",{"range":"165","text":"166"},"Update the dependencies array to be: [id, url]",{"range":"167","text":"168"},"Update the dependencies array to be: [job, url]",{"range":"169","text":"170"},"Update the dependencies array to be: [data, mockData.password, user]",{"range":"171","text":"172"},{"range":"173","text":"162"},[898,934],"[jobListResponse, jobDeleteResponse, jobs]",[876,883],"[login, props]",[1889,1897],"[filter, url]",[2849,2853],"[id, url]",[4232,4237],"[job, url]",[1755,1761],"[data, mockData.password, user]",[766,802]]