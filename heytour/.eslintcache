[{"D:\\CodeProject\\JOB\\heytour\\src\\index.js":"1","D:\\CodeProject\\JOB\\heytour\\src\\App.js":"2","D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenu.js":"3","D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenuReducer.js":"4","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobList.js":"5","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\Login.js":"6","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListAPI.js":"7","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListContent.js":"8","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginReducer.js":"9","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginAPI.js":"10","D:\\CodeProject\\JOB\\heytour\\src\\common\\SelectForm.js":"11","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\AddJob.js":"12","D:\\CodeProject\\JOB\\heytour\\src\\common\\NavAdmin.js":"13","D:\\CodeProject\\JOB\\heytour\\src\\config\\apiUrl.js":"14","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobAdmin.js":"15","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetail.js":"16","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetailReducer.js":"17","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListReducer.js":"18","D:\\CodeProject\\JOB\\heytour\\src\\common\\Footer.js":"19","D:\\CodeProject\\JOB\\heytour\\src\\common\\About.js":"20"},{"size":187,"mtime":1609146393916,"results":"21","hashOfConfig":"22"},{"size":880,"mtime":1612174854862,"results":"23","hashOfConfig":"22"},{"size":3128,"mtime":1611477810198,"results":"24","hashOfConfig":"22"},{"size":540,"mtime":1607128033171,"results":"25","hashOfConfig":"22"},{"size":3001,"mtime":1611480859244,"results":"26","hashOfConfig":"22"},{"size":3558,"mtime":1611189416383,"results":"27","hashOfConfig":"22"},{"size":5521,"mtime":1611990674752,"results":"28","hashOfConfig":"22"},{"size":2915,"mtime":1611212022445,"results":"29","hashOfConfig":"22"},{"size":894,"mtime":1607085531654,"results":"30","hashOfConfig":"22"},{"size":1830,"mtime":1610273495683,"results":"31","hashOfConfig":"22"},{"size":1439,"mtime":1612175668873,"results":"32","hashOfConfig":"22"},{"size":5692,"mtime":1611365643641,"results":"33","hashOfConfig":"22"},{"size":963,"mtime":1610677052588,"results":"34","hashOfConfig":"22"},{"size":248,"mtime":1611468144478,"results":"35","hashOfConfig":"22"},{"size":2720,"mtime":1611283503892,"results":"36","hashOfConfig":"22"},{"size":4368,"mtime":1611367330947,"results":"37","hashOfConfig":"22"},{"size":1093,"mtime":1611484004993,"results":"38","hashOfConfig":"22"},{"size":1581,"mtime":1611203249665,"results":"39","hashOfConfig":"22"},{"size":226,"mtime":1612174532584,"results":"40","hashOfConfig":"22"},{"size":199,"mtime":1612174500481,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1inprzj",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\CodeProject\\JOB\\heytour\\src\\index.js",[],["90","91"],"D:\\CodeProject\\JOB\\heytour\\src\\App.js",["92"],"D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenu.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\common\\AppMenuReducer.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobList.js",["93","94","95","96"],"import React, { useEffect, useState, useReducer } from \"react\";\r\nimport { Grid, Breadcrumb, Pagination } from \"semantic-ui-react\";\r\nimport { useJobDelete, useJobList } from \"./JobListAPI\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport JobListContent from \"./JobListContent\";\r\nimport JobDetail from \"./JobDetail\";\r\nimport jobListReducer from \"./JobListReducer\";\r\n\r\nexport default function JobList() {\r\n  const [jobListResponse, setJobListFilter] = useJobList(null);\r\n  const [jobDeleteResponse, setJobId] = useJobDelete();\r\n\r\n  //const [jobs, setJobs] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(jobListReducer, {\r\n    jobs: [],\r\n    jobSelected: {},\r\n    isError: false,\r\n    isLoading: false,\r\n    isCreate: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(jobListResponse);\r\n\r\n    if (jobListResponse.data && !jobListResponse.isError) {\r\n      // setJobs(jobListResponse.data);\r\n      dispatch({ type: \"JOBLIST_SUCCESS\", payload: jobListResponse.data });\r\n    }\r\n\r\n    if (jobDeleteResponse.data && !jobDeleteResponse.isError) {\r\n      //setJobs(jobs.filter((job) => job.id !== jobDeleteResponse.data));\r\n      dispatch({\r\n        type: \"JOBLIST_SUCCESS\",\r\n        payload: state.jobs.filter((job) => job.id !== jobDeleteResponse.data),\r\n      });\r\n    }\r\n  }, [jobListResponse, jobDeleteResponse]);\r\n  //const pages = 3;\r\n  // let pageLen = Math.ceil(jobs.length / pages);\r\n\r\n  function handleDelete(id) {\r\n    setJobId(id);\r\n  }\r\n\r\n  function handleJobDetailEDIT(job) {\r\n    dispatch({ type: \"JOBDETAIL_EDIT\", payload: job });\r\n  }\r\n\r\n  function handleJobDetailClose() {\r\n    dispatch({ type: \"JOBDETAIL_CLOSE\" });\r\n  }\r\n\r\n  function handleSave(job) {\r\n    var jobs = state.jobs.filter((j) => j.id !== job.id);\r\n    jobs.unshift(job);\r\n    dispatch({ type: \"JOBDETAIL_SAVE\", payload: jobs });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Section link>Home</Breadcrumb.Section>\r\n        <Breadcrumb.Divider />\r\n        <Breadcrumb.Section active>Jobs</Breadcrumb.Section>\r\n      </Breadcrumb>\r\n\r\n      <Grid>\r\n        {/* {jobListResponse.data &&\r\n          jobListResponse.data.map((job, index) => { */}\r\n        {/* {jobs && */}\r\n        {state.jobs.map((job) => {\r\n          return (\r\n            <JobListContent\r\n              key={job.id}\r\n              //isLoading={jobListResponse.isLoading}\r\n              job={job}\r\n              deleteJob={handleDelete}\r\n              onEdit={handleJobDetailEDIT}\r\n            />\r\n          );\r\n        })}\r\n      </Grid>\r\n\r\n      {state.jobDetailOpen && (\r\n        <JobDetail\r\n          isCreate={state.isCreate}\r\n          open={state.jobDetailOpen}\r\n          onClose={handleJobDetailClose}\r\n          onSave={handleSave}\r\n          jobSelected={state.jobSelected}\r\n        />\r\n      )}\r\n\r\n      <Pagination\r\n        defaultActivePage={5}\r\n        totalPages={10}\r\n        floated=\"right\"\r\n        onPageChange={() => {\r\n          console.log(\"翻页\");\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\authentication\\Login.js",["97"],"import React, { useEffect, useRef, useReducer } from \"react\";\r\nimport { Button, Form, Modal, Message } from \"semantic-ui-react\";\r\nimport { useLogin } from \"./LoginAPI\";\r\nimport authReducer from \"./LoginReducer\";\r\n\r\nexport default function Login(props) {\r\n  const didMountRef = useRef(false);\r\n  //利用ref.current保存组件更新前的值，false表示更新完之后\r\n  const [login, setLogin] = useLogin(null);\r\n\r\n  const [state, dispatch] = useReducer(authReducer, {\r\n    username: \"\",\r\n    password: \"\",\r\n    isError: false,\r\n    isLoading: false,\r\n    validation: {},\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      if (login.isError) {\r\n        dispatch({ type: \"AUTH_ERROR\" });\r\n      } else if (login.isLoading) {\r\n        dispatch({ type: \"AUTH_LOADING\" });\r\n      } else {\r\n        props.onLogin(login.data);\r\n      }\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [login]);\r\n\r\n  function handleLogin() {\r\n    //dispatch({ type: \"AUTH_LOADING\" });\r\n    const user = {\r\n      username: state.username,\r\n      password: state.password,\r\n    };\r\n    setLogin(user);\r\n  }\r\n  /*const [user, setUser] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");*/\r\n\r\n  //   const [isLoading, setIsLoading] = useState(false);\r\n\r\n  //   const checkLogin = () => {\r\n  //     setIsLoading(true);\r\n  //     setTimeout(() => {\r\n  //       setIsLoading(false);\r\n  //     }, 2000);\r\n  //   };\r\n  function handleChange(e, { name, value }) {\r\n    dispatch({\r\n      type: \"AUTH_TYPING\",\r\n      payload: { name: name, value: value },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      closeIcon\r\n      onClose={props.onClose}\r\n      // onOpen={() => props.onOpen}\r\n      open={props.open}\r\n    >\r\n      <Modal.Header>登录框</Modal.Header>\r\n      <Modal.Content>\r\n        <Form\r\n          onSubmit={handleLogin}\r\n          loading={state.isLoading}\r\n          error={state.isError}\r\n        >\r\n          <Form.Field>\r\n            <Form.Input\r\n              label=\"输入用户名\"\r\n              type=\"text\"\r\n              placeholder=\"User Name\"\r\n              required\r\n              name=\"username\"\r\n              value={state.username}\r\n              //onChange 属性，当Input框的内容被改变的时候，\r\n              //就自动调用onChange中的函数，然后在函数中使用set方法将用户名和密码储存到state中\r\n              // onChange={(e) => {\r\n              //   setUser(e.target.value);\r\n              // }}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <Form.Input\r\n              label=\"输入密码\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              required\r\n              name=\"password\"\r\n              value={state.password}\r\n              // onChange={(e) => {\r\n              //   setPassword(e.target.value);\r\n              // }}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Button type=\"button\" onClick={props.onClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            // onClick={() => {\r\n            //   props.onLogin(user);\r\n            // }}\r\n          >\r\n            Login\r\n          </Button>\r\n          {state.isError && (\r\n            <Message\r\n              error\r\n              header=\"Login Failed\"\r\n              content=\"Please check your username and password.\"\r\n            />\r\n          )}\r\n        </Form>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListAPI.js",["98","99","100","101","102"],"import { useState, useEffect, useReducer, useRef } from \"react\";\r\n// import JobData from \"./data.json\";\r\nimport axios from \"axios\";\r\nimport servicePath from \"../config/apiUrl\";\r\n\r\nfunction jobAPIReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"FETCH_INIT\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case \"FETCH_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: action.payload,\r\n      };\r\n    case \"FETCH_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport function useJobList(initialFilter) {\r\n  const [state, dispatch] = useReducer(jobAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n  //const url = \"https://localhost:44351/api/jobs\";\r\n  const url = servicePath.getJobs;\r\n  const didMountRef = useRef(true);\r\n  //useRef修改ref的值不会重新render,在组件更新时触发设置成true\r\n  //达成在第一次渲染时，会不会render这个地方\r\n  // const data = JobData;\r\n  const [filter, setFilter] = useState(null);\r\n  //时间排序 比如找出最近一周的工作。\r\n  useEffect(() => {\r\n    // function sleep(ms) {\r\n    //   return new Promise((resolve) => setTimeout(resolve, ms));\r\n    // }\r\n    async function getJobs() {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n      // const headers = {\r\n      //   \"Content-Type\": \"application/json\",\r\n      // };\r\n\r\n      //await sleep(600);\r\n      // dispatch({ type: \"FETCH_SUCCESS\", payload: data });\r\n      try {\r\n        const response = await axios.get(url);\r\n        console.log(response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: response.data });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    }\r\n\r\n    if (didMountRef.current) {\r\n      getJobs();\r\n    }\r\n  }, [filter]);\r\n  return [state, setFilter];\r\n}\r\n\r\nexport function useJobDelete() {\r\n  const didMountRef = useRef(false);\r\n  //useRef可以保存组件更新前的一些状态\r\n  //组件更新时，ref.current中保存的值不会自动更新，需要我们手动更新\r\n  //const url = \"https://localhost:44351/api/jobs/\";\r\n  const url = servicePath.getJobs;\r\n  const [id, setId] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(jobAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const deleteJob = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n\r\n      try {\r\n        const response = await axios.delete(url + id);\r\n        console.log(\"call了删除后的：\" + response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: id });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    };\r\n\r\n    if (didMountRef.current && id) {\r\n      deleteJob();\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [id]);\r\n\r\n  return [state, setId];\r\n}\r\n\r\nexport function useJobSave() {\r\n  const didMountRef = useRef(false);\r\n  //useRef修改ref的值不会重新render,在组件更新时触发设置成false\r\n  //useRef可以保存组件更新前的一些状态(还有一种事DOM对象)\r\n  //组件更新时，ref.current中保存的值(null)不会自动更新，需要我们手动更新\r\n  const url = servicePath.getJobs;\r\n  const [job, setJob] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(jobAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const putJob = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n\r\n      try {\r\n        const response = await axios.put(url + job.id, job);\r\n        console.log(response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: job });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    };\r\n\r\n    const postJob = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n\r\n      try {\r\n        const response = await axios.post(url, job);\r\n        console.log(response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: response.data });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n    };\r\n\r\n    if (didMountRef.current && job && job.id) {\r\n      putJob();\r\n    } else if (didMountRef.current && job) {\r\n      postJob();\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [job]);\r\n  //一个是给出去的state 另一个是用来给consumer更新state的\r\n  return [state, setJob];\r\n}\r\n\r\nexport function useJobPost() {\r\n  const didMountRef = useRef(false);\r\n\r\n  const url = servicePath.getJobs;\r\n\r\n  const [job, setJob] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(jobAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const postJob = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n\r\n      try {\r\n        const response = await axios.post(url, job);\r\n        console.log(response);\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: response.data });\r\n      } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: \"FETCH_FAILURE\" });\r\n      }\r\n\r\n      if (didMountRef.current && job) {\r\n        postJob();\r\n      } else {\r\n        didMountRef.current = true;\r\n      }\r\n    };\r\n  }, [job]);\r\n\r\n  return [state, setJob];\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListContent.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginReducer.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\authentication\\LoginAPI.js",["103"],"import { useState, useEffect, useReducer, useRef } from \"react\";\r\n\r\nfunction authAPIReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"AUTH_INIT\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case \"AUTH_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: action.payload,\r\n      };\r\n    case \"AUTH_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport function useLogin(initialUser) {\r\n  const didMountRef = useRef(false);\r\n  //修改ref的值不会重新render,在组件更新时触发\r\n  const mockData = {\r\n    userName: \"JL\",\r\n    password: \"123456\",\r\n  };\r\n\r\n  const mockJsonRes =\r\n    '{\"firstName\": \"Admin\", \"lastName\": \"Lee\", \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"}';\r\n\r\n  const data = JSON.parse(mockJsonRes);\r\n\r\n  const [user, setUser] = useState(null);\r\n\r\n  const [state, dispatch] = useReducer(authAPIReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function sleep(ms) {\r\n      return new Promise((resolve) => setTimeout(resolve, ms));\r\n    }\r\n\r\n    async function authenticate() {\r\n      dispatch({ type: \"AUTH_INIT\" });\r\n      await sleep(600);\r\n\r\n      if (user.password === mockData.password) {\r\n        dispatch({ type: \"AUTH_SUCCESS\", payload: data });\r\n      } else {\r\n        dispatch({ type: \"AUTH_FAILURE\" });\r\n      }\r\n    }\r\n\r\n    if (didMountRef.current) {\r\n      authenticate();\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [user]);\r\n\r\n  return [state, setUser];\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\common\\SelectForm.js",["104","105","106"],"D:\\CodeProject\\JOB\\heytour\\src\\job-list\\AddJob.js",["107","108","109"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../static/css/AddJob.css\";\r\nimport {\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  TextArea,\r\n  Button,\r\n  Icon,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport servicePath from \"../config/apiUrl\";\r\n\r\nfunction AddJob() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const genderOptions = [\r\n    { key: \"t\", text: \"True\", value: \"male\" },\r\n    { key: \"f\", text: \"False\", value: \"female\" },\r\n  ];\r\n\r\n  const [id, setId] = useState(0); //文章的ID，如果是0说明是新增加工作，如果不是0，说明是修改\r\n  const [isActive, setIsActive] = useState(true);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [industry, setIndustry] = useState(\"\");\r\n  const [picture, setPicture] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [jobDesc, setJobDesc] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"执行了进入Admin权限的页面\");\r\n  }, []);\r\n\r\n  const changeId = (e) => {\r\n    setId(e.target.value);\r\n  };\r\n\r\n  const changePicture = (e) => {\r\n    setPicture(e.target.value);\r\n  };\r\n\r\n  const changeTitle = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const changeIndustry = (e) => {\r\n    setIndustry(e.target.value);\r\n  };\r\n\r\n  const changeCompany = (e) => {\r\n    setCompany(e.target.value);\r\n  };\r\n\r\n  const changeLocation = (e) => {\r\n    setLocation(e.target.value);\r\n  };\r\n\r\n  const changeJobDesc = (e) => {\r\n    setJobDesc(e.target.value);\r\n  };\r\n\r\n  const changeEmail = (e) => {\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  const changeIsActive = (e) => {\r\n    setIsActive(e.target.value);\r\n  };\r\n\r\n  const saveJob = () => {\r\n    let dataProps = {};\r\n    //id是数字,id是由数据库自动生成的,不能带着id插入\r\n    dataProps.id = parseInt(id);\r\n    dataProps.title = title;\r\n    dataProps.location = location;\r\n    dataProps.industry = industry;\r\n    dataProps.company = company;\r\n    dataProps.email = email;\r\n    dataProps.jobDesc = jobDesc;\r\n    // let dateText = postedOn.replace(\"-\", \"/\");\r\n    // dataProps.addTime = new Date(dateText).getTime() / 1000;\r\n    //确保数据模型正确\r\n    dataProps.postedOn = new Date();\r\n    dataProps.picture = picture;\r\n    console.log(dataProps);\r\n    let data = new FormData();\r\n    data.set(\"job\", dataProps);\r\n\r\n    axios\r\n      .post(\"https://localhost:5001/api/jobs\", dataProps, {\r\n        processData: false,\r\n        contentType: false,\r\n      })\r\n      .then((res) => {\r\n        if (res.code == 200) {\r\n          <Message success header=\"Form Completed\" content=\"发布成功\" />;\r\n        }\r\n        console.log(res.data);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      closeIcon\r\n      onClose={() => setOpen(false)}\r\n      trigger={<Button primary>Post</Button>}\r\n    >\r\n      <Modal.Header>Post新工作</Modal.Header>\r\n      <Modal.Content>\r\n        <Form>\r\n          <Form.Checkbox\r\n            required\r\n            toggle\r\n            name=\"IsActive\"\r\n            label=\"Active\"\r\n            checked={isActive}\r\n            placeholder=\"IsActive\"\r\n            onChange={changeIsActive}\r\n          />\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Field\r\n              control={Input}\r\n              label=\"id\"\r\n              placeholder=\"id\"\r\n              onChange={changeId}\r\n            />\r\n            <Form.Field\r\n              required\r\n              control={Input}\r\n              label=\"Title\"\r\n              placeholder=\"Title\"\r\n              onChange={changeTitle}\r\n            />\r\n            <Form.Field\r\n              control={Input}\r\n              label=\"Industry\"\r\n              placeholder=\"Industry\"\r\n              onChange={changeIndustry}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Field\r\n            control={Input}\r\n            label=\"Picture\"\r\n            placeholder=\"Picture Url\"\r\n            onChange={changePicture}\r\n          />\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Field\r\n              id=\"form-input-control-Company\"\r\n              control={Input}\r\n              label=\"Company\"\r\n              placeholder=\"Company\"\r\n              onChange={changeCompany}\r\n            />\r\n            <Form.Field\r\n              id=\"form-input-control-Location\"\r\n              control={Input}\r\n              label=\"Location\"\r\n              placeholder=\"Location\"\r\n              onChange={changeLocation}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Field\r\n              required\r\n              control={Input}\r\n              label=\"Email\"\r\n              placeholder=\"Email\"\r\n              onChange={changeEmail}\r\n              width={7}\r\n            />\r\n            <Form.Field\r\n              required\r\n              control={Input}\r\n              label=\"PostedOn\"\r\n              placeholder=\"PostedOn\"\r\n              width={9}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Field\r\n            id=\"form-textarea-control-opinion\"\r\n            control={TextArea}\r\n            label=\"JobDesc\"\r\n            placeholder=\"工作描述\"\r\n            onChange={changeJobDesc}\r\n          />\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={() => {\r\n              saveJob();\r\n              console.log(\"点击了发布工作\");\r\n            }}\r\n          >\r\n            <Icon name=\"save\" />\r\n            Post\r\n          </Button>\r\n        </Form>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\nexport default AddJob;\r\n","D:\\CodeProject\\JOB\\heytour\\src\\common\\NavAdmin.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\config\\apiUrl.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobAdmin.js",["110","111"],"import React, { useEffect, useReducer } from \"react\";\r\nimport { Grid, Breadcrumb } from \"semantic-ui-react\";\r\nimport { useJobDelete, useJobList } from \"./JobListAPI\";\r\nimport JobListContent from \"./JobListContent\";\r\nimport { Link } from \"react-router-dom\";\r\nimport JobDetail from \"./JobDetail\";\r\nimport jobListReducer from \"./JobListReducer\";\r\n\r\nfunction JobAdmin() {\r\n  const [jobListResponse, setJobListFilter] = useJobList(null);\r\n  const [jobDeleteResponse, setJobId] = useJobDelete();\r\n\r\n  //const [jobs, setJobs] = useState(null);\r\n  const [state, dispatch] = useReducer(jobListReducer, {\r\n    jobs: [],\r\n    jobSelected: {},\r\n    isError: false,\r\n    isLoading: false,\r\n    isCreate: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(jobListResponse);\r\n\r\n    if (jobListResponse.data && !jobListResponse.isError) {\r\n      // setJobs(jobListResponse.data);\r\n      dispatch({ type: \"JOB_SUCCESS\", payload: jobListResponse.data });\r\n    }\r\n\r\n    if (jobDeleteResponse.data && !jobDeleteResponse.isError) {\r\n      //setJobs(jobs.filter((job) => job.id !== jobDeleteResponse.data));\r\n      dispatch({\r\n        type: \"JOB_SUCCESS\",\r\n        payload: state.jobs.filter((job) => job.id !== jobDeleteResponse.data),\r\n      });\r\n    }\r\n  }, [jobListResponse, jobDeleteResponse]);\r\n\r\n  function handleDelete(id) {\r\n    setJobId(id);\r\n  }\r\n\r\n  function handleJobDetailEDIT(job) {\r\n    dispatch({ type: \"JOBDETAIL_EDIT\", payload: job });\r\n  }\r\n\r\n  function handleJobDetailClose() {\r\n    dispatch({ type: \"JOBDETAIL_CLOSE\" });\r\n  }\r\n\r\n  function handleSave(job) {}\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Link to={\"/home\"}>\r\n          {\" \"}\r\n          <Breadcrumb.Section link>Home</Breadcrumb.Section>\r\n        </Link>\r\n        <Breadcrumb.Divider />\r\n        <Breadcrumb.Section active>Admin</Breadcrumb.Section>\r\n      </Breadcrumb>\r\n      <Grid>\r\n        {/* {jobListResponse.data &&\r\n          jobListResponse.data.map((job, index) => { */}\r\n        {/* {jobs && */}\r\n        {state.jobs.map((job, index) => {\r\n          return (\r\n            <Link to={\"/jobs/\" + job.id}>\r\n              <JobListContent\r\n                key={job.id}\r\n                //isLoading={jobListResponse.isLoading}\r\n                job={job}\r\n                deleteJob={handleDelete}\r\n                onEdit={handleJobDetailEDIT}\r\n              />\r\n            </Link>\r\n          );\r\n        })}\r\n      </Grid>\r\n      {state.jobDetailOpen && (\r\n        <JobDetail\r\n          isCreate={state.isCreate}\r\n          open={state.jobDetailOpen}\r\n          onClose={handleJobDetailClose}\r\n          onSave={handleSave}\r\n          jobSelected={state.jobSelected}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobAdmin;\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetail.js",["112"],"import React, { useEffect, useRef, useReducer } from \"react\";\r\nimport { Button, Form, Modal, Message, Icon } from \"semantic-ui-react\";\r\nimport { useJobSave } from \"./JobListAPI\";\r\nimport jobDetailReducer from \"./JobDetailReducer\";\r\n\r\nexport default function JobDetail(props) {\r\n  const didMountRef = useRef(false);\r\n  //useRef可以保存组件更新前的一些状态\r\n  //组件更新时，ref.current中保存的值不会自动更新，需要我们手动更新\r\n\r\n  const [jobSaveResponse, setJobRequest] = useJobSave();\r\n  // 上面第一个就是hook:useJobSave()里面return的state 第二个是对应setJob来更新state的\r\n\r\n  const [state, dispatch] = useReducer(jobDetailReducer, {\r\n    jobDetail: props.jobSelected,\r\n    isError: false,\r\n    isLoading: false,\r\n    isCreate: props.isCreate,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (didMountRef.current) {\r\n      if (jobSaveResponse.isError) {\r\n        dispatch({ type: \"JOBDETAIL_ERROR\" });\r\n      } else if (jobSaveResponse.isLoading) {\r\n        dispatch({ type: \"JOBDETAIL_LOADING\" });\r\n      } else {\r\n        dispatch({ type: \"JOBDETAIL_SUCCESS\", payload: jobSaveResponse.data });\r\n        props.onSave(state.jobDetail);\r\n      }\r\n    } else {\r\n      didMountRef.current = true;\r\n    }\r\n  }, [jobSaveResponse]);\r\n\r\n  function handleSave(e) {\r\n    e.preventDefault();\r\n    //Object.assign(target, ...sources)源对象分配到目标对象。它将返回目标对象。\r\n    const job = Object.assign({}, state.jobDetail);\r\n    setJobRequest(job);\r\n  }\r\n\r\n  function handleChange(e, { name, value }) {\r\n    const job = Object.assign({}, state.jobDetail);\r\n\r\n    job[name] = value;\r\n\r\n    dispatch({ type: \"JOBDETAIL_TYPING\", payload: job });\r\n  }\r\n\r\n  return (\r\n    <Modal onClose={props.onClose} open={props.open}>\r\n      <Modal.Header>{state.isCreate ? \"New Job\" : \"Edit Job\"}</Modal.Header>\r\n\r\n      <Modal.Content>\r\n        <Form\r\n          onSubmit={handleSave}\r\n          loading={state.isLoading}\r\n          error={state.isError}\r\n        >\r\n          <Form.Checkbox\r\n            required\r\n            toggle\r\n            name=\"IsActive\"\r\n            label=\"Active\"\r\n            checked={state.jobDetail.isActive}\r\n            placeholder=\"User Name\"\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Input\r\n            required\r\n            name=\"title\"\r\n            label=\"Title\"\r\n            value={state.jobDetail.title}\r\n            placeholder=\"Title\"\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Input\r\n            required\r\n            name=\"company\"\r\n            label=\"Company\"\r\n            value={state.jobDetail.company}\r\n            placeholder=\"Company\"\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Input\r\n            required\r\n            name=\"industry\"\r\n            label=\"Industry\"\r\n            value={state.jobDetail.industry}\r\n            placeholder=\"Industry\"\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Input\r\n            required\r\n            name=\"location\"\r\n            label=\"Location\"\r\n            value={state.jobDetail.location}\r\n            placeholder=\"Location\"\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Input\r\n            name=\"picture\"\r\n            label=\"Picture\"\r\n            value={state.jobDetail.picture}\r\n            placeholder=\"Picture\"\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Input\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            value={state.jobDetail.email}\r\n            placeholder=\"Email\"\r\n            onChange={handleChange}\r\n          />\r\n          <Form.Input\r\n            name=\"jobDesc\"\r\n            label=\"JobDesc\"\r\n            value={state.jobDetail.jobDesc}\r\n            placeholder=\"JobDesc\"\r\n            onChange={handleChange}\r\n          />\r\n\r\n          <Button color=\"google plus\" type=\"button\" onClick={props.onClose}>\r\n            <Icon name=\"cancel\" />\r\n            Close\r\n          </Button>\r\n\r\n          <Button color=\"instagram\" type=\"submit\">\r\n            <Icon name=\"save\" />\r\n            Save\r\n          </Button>\r\n\r\n          {state.isError && (\r\n            <Message\r\n              error\r\n              header=\"Save Failed\"\r\n              content=\"Please check the inputs.\"\r\n            />\r\n          )}\r\n        </Form>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n","D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobDetailReducer.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\job-list\\JobListReducer.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\common\\Footer.js",[],"D:\\CodeProject\\JOB\\heytour\\src\\common\\About.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":16},{"ruleId":"117","severity":1,"message":"121","line":1,"column":28,"nodeType":"119","messageId":"120","endLine":1,"endColumn":36},{"ruleId":"117","severity":1,"message":"122","line":5,"column":10,"nodeType":"119","messageId":"120","endLine":5,"endColumn":14},{"ruleId":"117","severity":1,"message":"123","line":11,"column":27,"nodeType":"119","messageId":"120","endLine":11,"endColumn":43},{"ruleId":"124","severity":1,"message":"125","line":39,"column":6,"nodeType":"126","endLine":39,"endColumn":42,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":31,"column":6,"nodeType":"126","endLine":31,"endColumn":13,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"130","line":72,"column":6,"nodeType":"126","endLine":72,"endColumn":14,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"130","line":109,"column":6,"nodeType":"126","endLine":109,"endColumn":10,"suggestions":"132"},{"ruleId":"124","severity":1,"message":"130","line":162,"column":6,"nodeType":"126","endLine":162,"endColumn":11,"suggestions":"133"},{"ruleId":"117","severity":1,"message":"134","line":194,"column":9,"nodeType":"119","messageId":"120","endLine":194,"endColumn":16},{"ruleId":"124","severity":1,"message":"130","line":199,"column":6,"nodeType":"126","endLine":199,"endColumn":11,"suggestions":"135"},{"ruleId":"124","severity":1,"message":"136","line":71,"column":6,"nodeType":"126","endLine":71,"endColumn":12,"suggestions":"137"},{"ruleId":"117","severity":1,"message":"138","line":1,"column":27,"nodeType":"119","messageId":"120","endLine":1,"endColumn":36},{"ruleId":"117","severity":1,"message":"139","line":4,"column":8,"nodeType":"119","messageId":"120","endLine":4,"endColumn":15},{"ruleId":"117","severity":1,"message":"140","line":9,"column":10,"nodeType":"119","messageId":"120","endLine":9,"endColumn":14},{"ruleId":"117","severity":1,"message":"141","line":13,"column":8,"nodeType":"119","messageId":"120","endLine":13,"endColumn":19},{"ruleId":"117","severity":1,"message":"142","line":18,"column":9,"nodeType":"119","messageId":"120","endLine":18,"endColumn":22},{"ruleId":"143","severity":1,"message":"144","line":98,"column":22,"nodeType":"145","messageId":"146","endLine":98,"endColumn":24},{"ruleId":"117","severity":1,"message":"123","line":10,"column":27,"nodeType":"119","messageId":"120","endLine":10,"endColumn":43},{"ruleId":"124","severity":1,"message":"125","line":37,"column":6,"nodeType":"126","endLine":37,"endColumn":42,"suggestions":"147"},{"ruleId":"124","severity":1,"message":"148","line":34,"column":6,"nodeType":"126","endLine":34,"endColumn":23,"suggestions":"149"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'JobAdmin' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","'setJobListFilter' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.jobs'. Either include it or remove the dependency array.","ArrayExpression",["152"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["153"],"React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["154"],["155"],["156"],"'postJob' is assigned a value but never used.",["157"],"React Hook useEffect has missing dependencies: 'data' and 'mockData.password'. Either include them or remove the dependency array.",["158"],"'useEffect' is defined but never used.","'JobList' is defined but never used.","'data' is assigned a value but never used.","'servicePath' is defined but never used.","'genderOptions' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["159"],"React Hook useEffect has missing dependencies: 'props' and 'state.jobDetail'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"169","fix":"171"},{"desc":"172","fix":"173"},{"desc":"161","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [jobListResponse, jobDeleteResponse, state.jobs]",{"range":"177","text":"178"},"Update the dependencies array to be: [login, props]",{"range":"179","text":"180"},"Update the dependencies array to be: [filter, url]",{"range":"181","text":"182"},"Update the dependencies array to be: [id, url]",{"range":"183","text":"184"},"Update the dependencies array to be: [job, url]",{"range":"185","text":"186"},{"range":"187","text":"186"},"Update the dependencies array to be: [data, mockData.password, user]",{"range":"188","text":"189"},{"range":"190","text":"178"},"Update the dependencies array to be: [jobSaveResponse, props, state.jobDetail]",{"range":"191","text":"192"},[1290,1326],"[jobListResponse, jobDeleteResponse, state.jobs]",[876,883],"[login, props]",[1889,1897],"[filter, url]",[2849,2853],"[id, url]",[4240,4245],"[job, url]",[5118,5123],[1755,1761],"[data, mockData.password, user]",[1242,1278],[1136,1153],"[jobSaveResponse, props, state.jobDetail]"]